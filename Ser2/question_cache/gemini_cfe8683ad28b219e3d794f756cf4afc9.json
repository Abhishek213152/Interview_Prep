{"title": "Balanced Subtree Sum Maximization", "difficulty": "Medium", "category": "trees", "description": "Given a binary tree where each node contains an integer value, find the maximum sum achievable from a balanced subtree. A balanced subtree is defined as a subtree where the difference between the number of nodes in its left and right subtrees is at most 1 (|left_subtree_size - right_subtree_size| <= 1).  The sum of a subtree is the sum of all node values within that subtree.  Return the maximum sum found. If no balanced subtree exists, return 0.", "examples": [{"input": "```\n     1\n    / \\\n   2   3\n  / \\   \\\n 4   5   6\n```", "output": "16", "explanation": "The subtree rooted at node with value 1 is balanced (|2-2| <= 1) and has a sum of 16 (1+2+3+4+5+6).  Other balanced subtrees exist, but none have a larger sum."}, {"input": "```\n      10\n     /  \\\n    5    15\n   / \\   / \\\n  2  7  12 18\n / \\\n1   3\n```", "output": "37", "explanation": "The subtree rooted at node with value 5 is balanced (|2 - 1| <= 1) and has a sum of 18 (5+2+7+1+3).  The subtree rooted at 15 is also balanced (|1 - 1| <= 1) and has sum 33. The subtree rooted at 10 is not balanced. Therefore, the maximum sum from a balanced subtree is 37 (from the subtree rooted at 15)."}, {"input": "```\n     1\n    /\n   2\n  /\n 3\n```", "output": "6", "explanation": "The subtree rooted at node 2 is balanced, with a sum of 5 (2+3). The subtree rooted at 1 is not balanced.  The subtree rooted at 3 is balanced with a sum of 3. Therefore, the maximum sum from a balanced subtree is 6 (from the subtree rooted at node 1, which is the only balanced subtree in the scenario where only one branch exists at each node).\n\nConstraints:\n- The number of nodes in the tree will be between 1 and 1000.\n- The value of each node will be between -1000 and 1000.\n- Time Complexity: O(N), where N is the number of nodes in the tree.\n- Space Complexity: O(H), where H is the height of the tree (can be O(N) in the worst case for a skewed tree)."}], "constraints": ["- The number of nodes in the tree will be between 1 and 1000.", "- The value of each node will be between -1000 and 1000.", "- Time Complexity: O(N), where N is the number of nodes in the tree.", "- Space Complexity: O(H), where H is the height of the tree (can be O(N) in the worst case for a skewed tree)."], "function_signature": {"java": "public int maxBalancedSubtreeSum(TreeNode root) { // Your code here }", "cpp": "int maxBalancedSubtreeSum(TreeNode* root) { // Your code here }", "python": "def max_balanced_subtree_sum(root): # Your code here\n    pass"}, "id": "cfe8683ad28b219e3d794f756cf4afc9"}