{"title": "Optimized Parcel Distribution", "difficulty": "Medium", "category": "greedy", "description": "You are tasked with distributing parcels to various locations using a fleet of drones. Each drone has a limited carrying capacity (weight).  You are given a list of parcels, each with a weight and a destination.  The goal is to minimize the total number of drone flights required to deliver all parcels.  However, there's a catch: drones can only fly to locations geographically close to their starting point (the depot).  The closeness is determined by a distance function, which takes two locations as input and returns the distance between them.  You can assume you have an unlimited number of drones available.  Design a greedy algorithm to efficiently distribute parcels, prioritizing parcels with the nearest destinations first.", "examples": [{"input": "`parcels = [(5, \"A\", 1), (2, \"B\", 3), (3, \"A\", 1), (7, \"C\", 5), (1, \"B\", 3)]`  (weight, destination, distance from depot)\n   `capacity = 10`\n   `distance_function = lambda x, y: abs(x - y)`  (Example distance function; replace with a more complex one if desired)", "output": "2", "explanation": "Drone 1 carries (5, \"A\", 1) and (3, \"A\", 1) (total weight 8). Drone 2 carries (7, \"C\", 5). The parcels to B are then delivered by a separate drone. Parcels are grouped by destination to minimize flights."}, {"input": "`parcels = [(1, \"A\", 2), (2, \"B\", 1), (3, \"C\", 3), (4, \"A\", 2), (5, \"B\", 1)]`\n   `capacity = 5`\n   `distance_function = lambda x, y: abs(x - y)`", "output": "3", "explanation": "Drone 1: (2, \"B\", 1), (5, \"B\", 1). Drone 2: (1, \"A\", 2), (4, \"A\", 2). Drone 3: (3, \"C\", 3). The greedy approach minimizes flights by prioritizing destinations based on proximity.\n\n\nConstraints:\n- `parcels`: A list of tuples, where each tuple contains (weight, destination, distance_from_depot).\n- `weight`: A positive integer.\n- `destination`: A string representing the delivery location.\n- `distance_from_depot`: A positive integer representing the distance from the depot to the destination.\n- `capacity`: A positive integer representing the maximum weight a drone can carry.\n- `distance_function`: A function that takes two locations (integers or strings) and returns a non-negative distance between them.\n- The total weight of all parcels may exceed the capacity of a single drone.\n- Time complexity should be better than O(n^2), where n is the number of parcels.  A solution with O(n log n) or better is preferred.  Space complexity should be O(n) or better.\n\n\nNote:  A more realistic distance function (e.g., using latitude and longitude coordinates) could be used to make this problem more challenging.  The provided example uses a simplified distance function for clarity.  The core of the problem lies in the greedy strategy of prioritizing nearby destinations to minimize the number of flights."}], "constraints": ["- `parcels`: A list of tuples, where each tuple contains (weight, destination, distance_from_depot).", "- `weight`: A positive integer.", "- `destination`: A string representing the delivery location.", "- `distance_from_depot`: A positive integer representing the distance from the depot to the destination.", "- `capacity`: A positive integer representing the maximum weight a drone can carry.", "- `distance_function`: A function that takes two locations (integers or strings) and returns a non-negative distance between them.", "- The total weight of all parcels may exceed the capacity of a single drone.", "- Time complexity should be better than O(n^2), where n is the number of parcels.  A solution with O(n log n) or better is preferred.  Space complexity should be O(n) or better."], "function_signature": {"java": "public int minDroneFlights(List<Parcel> parcels, double droneCapacity, Function<String, Double> distanceToDepot) { // Your code here }", "cpp": "int minDroneFlights(const vector<Parcel>& parcels, double droneCapacity, function<double(const string&)> distanceToDepot) { // Your code here }", "python": "def min_drone_flights(parcels, drone_capacity, distance_to_depot): # Your code here\n    pass"}, "id": "eed00d1334f12645c99010ac8184694f"}