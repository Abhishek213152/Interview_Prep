{"title": "Maximum Deliciousness of a Sub-Sequence of Dishes", "difficulty": "Easy", "category": "dynamic programming", "description": "You are planning a party and have a list of dishes, each with an associated \"deliciousness\" rating.  You want to select a subsequence of dishes (not necessarily contiguous) such that the sum of their deliciousness ratings is maximized, with the added constraint that the selected subsequence must have no two dishes with deliciousness ratings differing by more than 5.  Find the maximum possible deliciousness sum.", "examples": [{"input": "[3, 8, 1, 7, 2, 9, 6]", "output": "23", "explanation": "We can select the subsequence [3, 8, 6, 6] (Note: the 6 appears twice, as we're forming a subsequence). The sum is 3 + 8 + 6 +6=23. Other subsequences might have the correct difference restriction but smaller total deliciousness."}, {"input": "[10, 12, 17, 20, 5]", "output": "27", "explanation": "The optimal subsequence is [10, 12, 5].  10+12+5 = 27.\n\n\nConstraints:\n- The input list will contain integers between 1 and 20 (inclusive).\n- The length of the input list will be at most 15.\n- The time complexity should be O(n * 2^n) or better, where n is the length of the input list.  (A brute-force approach with memoization is acceptable for an easy-level problem)."}], "constraints": ["- The input list will contain integers between 1 and 20 (inclusive).", "- The length of the input list will be at most 15.", "- The time complexity should be O(n * 2^n) or better, where n is the length of the input list.  (A brute-force approach with memoization is acceptable for an easy-level problem)."], "function_signature": {"java": "public int maxDeliciousness(int[] deliciousness) { // Your code here }", "cpp": "int maxDeliciousness(const std::vector<int>& deliciousness) { // Your code here }", "python": "def max_deliciousness(deliciousness): # Your code here\n    pass"}, "id": "371b6effe1c4abc44f2ebc6b739333ad"}