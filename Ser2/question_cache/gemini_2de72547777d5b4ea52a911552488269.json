{"title": "Counting Set Bits in Alternating Subsequences", "difficulty": "Easy", "category": "bit manipulation", "description": "Given a positive integer `n`, find the total number of set bits (1s in binary representation) across all its alternating subsequences.  An alternating subsequence is a subsequence where the elements alternate between even and odd (or odd and even). For example, if n = 6 (binary 110), the subsequences are [1], [1,0], [1], [0], [], the set bits are 1, 1, 1, 0, 0, totaling 3.", "examples": [{"input": "6 (binary 110)", "output": "3", "explanation": "The subsequences are [1], [1,0], [1], [0], []. The set bits in these subsequences are [1], [1], [1], [0], [0]. The sum of set bits is 3."}, {"input": "13 (binary 1101)", "output": "6", "explanation": "Subsequences are [1], [1,0], [1,0,1], [1,1], [1], [0], [0,1], [1], [],[]. The set bits in these subsequences are [1], [1],[2],[2],[1],[0],[1],[1],[0],[0]. The sum is 6 + 0 + 0 = 6. Note that [1, 1] is considered an alternating subsequence because the parity changes if we consider [1,1] as a subsequence of [1,1,0,1]\n\n\nConstraints:\n- 1 <= n <= 10^6 (n is a positive integer)\n- Time complexity: O(log n) or better is preferred.\n- Space complexity: O(1)"}], "constraints": ["- 1 <= n <= 10^6 (n is a positive integer)", "- Time complexity: O(log n) or better is preferred.", "- Space complexity: O(1)"], "function_signature": {"java": "public int countSetBitsInAlternatingSubsequences(int n) { // Your code here }", "cpp": "int countSetBitsInAlternatingSubsequences(int n) { // Your code here }", "python": "def count_set_bits_in_alternating_subsequences(n): # Your code here\n    pass"}, "id": "2de72547777d5b4ea52a911552488269"}