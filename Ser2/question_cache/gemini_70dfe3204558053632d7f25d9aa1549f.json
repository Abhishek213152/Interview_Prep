{"title": "Maximum Rectangular Area Under a Histogram of Varying Widths", "difficulty": "Easy", "category": "dynamic programming", "description": "You are given a histogram represented as a list of integers `heights`, where `heights[i]` represents the height of the i-th bar.  Each bar has a width of 1 unit. However, you can choose to combine adjacent bars to form wider bars. The area of a bar is its height multiplied by its width.  Find the maximum total area that can be formed by combining bars.", "examples": [{"input": "`heights = [2, 1, 3, 4, 1]`", "output": "`10`", "explanation": "We can combine bars to form two rectangles: one of height 3 and width 2 (bars at index 1 and 2), and one of height 4 and width 1 (bar at index 3). Total area = (3 * 2) + (4 * 1) = 10.  Other combinations yield smaller areas."}, {"input": "`heights = [1, 2, 3]`", "output": "`6`", "explanation": "Combining all bars forms a rectangle of height 1 and width 3. This results in an area of 3.  Combining the last two bars gives an area of 5. The optimal solution is to treat each bar individually, resulting in a total area of 6."}, {"input": "`heights = [5,4,3,2,1]`", "output": "`9`", "explanation": "The optimal solution combines the first two bars (5+4) and the last three (3+2+1) to get areas of 9 and 6 separately. However, taking the first two bars and treating the remaining individually will lead to an area of 9 + 2 + 1 = 12. It is optimal to treat each bar individually in this case.  The maximum area obtained is 9 from (5*1) + (4*1)\n\n\nConstraints:\n- `1 <= len(heights) <= 100`\n- `1 <= heights[i] <= 100` for all `i`\n- Time complexity: O(n) where n is the length of heights.\n- Space complexity: O(n)"}], "constraints": ["- `1 <= len(heights) <= 100`", "- `1 <= heights[i] <= 100` for all `i`", "- Time complexity: O(n) where n is the length of heights.", "- Space complexity: O(n)"], "function_signature": {"java": "public int maxArea(int[] heights) { // Your code here }", "cpp": "int maxArea(const std::vector<int>& heights) { // Your code here }", "python": "def max_area(heights): # Your code here\n    pass"}, "id": "70dfe3204558053632d7f25d9aa1549f"}