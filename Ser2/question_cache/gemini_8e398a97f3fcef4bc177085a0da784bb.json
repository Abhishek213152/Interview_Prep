{"title": "Sorted Subsequence Sum Minimization", "difficulty": "Medium", "category": "sorting", "description": "Given an array of integers `nums`, find the minimum sum of a non-empty sorted subsequence.  A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. The subsequence must be strictly increasing.", "examples": [{"input": "`nums = [-3, 1, 2, -1, 4, 5]`", "output": "`-2`", "explanation": "The minimum sum sorted subsequence is [-3, 1, 4] which sums up to -2.  Other valid subsequences are [1, 2, 4, 5], [1, 4, 5], [-3, 1], [-3, 2], [-3, 4], [-3, 5] and so on. But [-3, 1, 4] gives the minimum sum among sorted subsequences. Note that [-3, 2, 5] is valid but not sorted."}, {"input": "`nums = [5, 4, 3, 2, 1]`", "output": "`5`", "explanation": "The minimum sum sorted subsequence is [5] which sums up to 5. There are no other strictly increasing subsequences because the input is already in descending order."}, {"input": "`nums = [1, 3, 5, 7, 9]`", "output": "`1`", "explanation": "The minimum sum sorted subsequence is [1] with a sum of 1\n\n\nConstraints:\n- `1 <= nums.length <= 10^5`\n- `-10^9 <= nums[i] <= 10^9`\n-  Time complexity should be O(n log n) at most.\n- Space complexity should be O(n) at most."}], "constraints": ["- `1 <= nums.length <= 10^5`", "- `-10^9 <= nums[i] <= 10^9`", "-  Time complexity should be O(n log n) at most.", "- Space complexity should be O(n) at most."], "function_signature": {"java": "public int minSumSortedSubsequence(int[] nums) { // Your code here }", "cpp": "int minSumSortedSubsequence(const std::vector<int>& nums) { // Your code here }", "python": "def min_sum_sorted_subsequence(nums): # Your code here\n    pass"}, "id": "8e398a97f3fcef4bc177085a0da784bb"}