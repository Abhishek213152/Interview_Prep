{"title": "Recursive Digit Summation with Alternating Signs", "difficulty": "Easy", "category": "recursion", "description": "Write a recursive function that calculates the alternating sum of digits of a positive integer.  Start with the rightmost digit, adding it, then subtract the next digit to the left, add the next, and so on.  For example, for the number 12345, the calculation would be 5 - 4 + 3 - 2 + 1 = 3.", "examples": [{"input": "12345", "output": "3", "explanation": "5 - 4 + 3 - 2 + 1 = 3"}, {"input": "9876", "output": "-2", "explanation": "6 - 7 + 8 - 9 = -2"}, {"input": "10", "output": "-1", "explanation": "0 -1 = -1\n\n\nConstraints:\n- The input will be a positive integer.\n- The input integer will be less than 10^6.\n- No specific time/space complexity requirements are enforced for this easy level problem, but a clear recursive solution is expected."}], "constraints": ["- The input will be a positive integer.", "- The input integer will be less than 10^6.", "- No specific time/space complexity requirements are enforced for this easy level problem, but a clear recursive solution is expected."], "function_signature": {"java": "public int alternatingSum(int n) { // Your code here }", "cpp": "int alternatingSum(int n) { // Your code here }", "python": "def alternating_sum(n): # Your code here\n    pass"}, "id": "5f33a4d381c84edc785eb6771d18c841"}