{"title": "Optimal Candy Distribution for Picky Children", "difficulty": "Easy", "category": "greedy", "description": "You are organizing a children's party and have a bag containing *n* candies of different types. Each child has a preference list indicating the types of candies they like.  You want to distribute the candies such that each child receives at least one candy, and the total number of satisfied children (those who receive a candy type they like) is maximized.  You can give each child only one candy.  Assume you have enough candies of each type to satisfy all children's preferences, and each child will accept only one candy.", "examples": [{"input": "`candies = [\"A\", \"B\", \"C\", \"A\", \"B\"]`\n   `children_preferences = [[\"A\", \"B\"], [\"B\", \"C\"], [\"A\", \"C\"]] `", "output": "3", "explanation": "Child 1 can get candy \"A\", Child 2 can get candy \"B\", Child 3 can get candy \"C\". All three children are satisfied."}, {"input": "`candies = [\"A\", \"A\", \"B\", \"B\", \"C\"]`\n   `children_preferences = [[\"A\", \"C\"], [\"B\", \"A\"], [\"C\", \"B\"], [\"A\", \"B\"]] `", "output": "4", "explanation": "Child 1 can get candy \"A\", Child 2 can get candy \"B\", Child 3 can get candy \"C\", Child 4 can get candy \"A\".  All four children are satisfied.\n\n\nConstraints:\n- 1 <= len(candies) <= 100\n- 1 <= len(children_preferences) <= 100\n- 1 <= len(children_preferences[i]) <= 10  (length of each preference list)\n- candies and children_preferences will contain only uppercase letters representing candy types.\n- Time complexity should be less than O(n^2), where n is the total number of candies.  Space complexity should be O(n)."}], "constraints": ["- 1 <= len(candies) <= 100", "- 1 <= len(children_preferences) <= 100", "- 1 <= len(children_preferences[i]) <= 10  (length of each preference list)", "- candies and children_preferences will contain only uppercase letters representing candy types.", "- Time complexity should be less than O(n^2), where n is the total number of candies.  Space complexity should be O(n)."], "function_signature": {"java": "public int maxSatisfiedChildren(int n, List<List<Integer>> childrenPreferences) { // Your code here }", "cpp": "int maxSatisfiedChildren(int n, vector<vector<int>>& childrenPreferences) { // Your code here }", "python": "def max_satisfied_children(n, children_preferences): # Your code here\n    pass"}, "id": "6fc74d95eeab45c8fe66998706700e32"}