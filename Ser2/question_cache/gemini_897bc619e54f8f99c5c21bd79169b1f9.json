{"title": "Recursive Digit Summation with Alternating Signs", "difficulty": "Easy", "category": "recursion", "description": "Write a recursive function that calculates the alternating sum of digits of a non-negative integer.  Start with a positive sign for the leftmost digit.  For example, for the number 1234, the calculation would be 1 - 2 + 3 - 4 = -2.", "examples": [{"input": "1234", "output": "-2", "explanation": "1 - 2 + 3 - 4 = -2"}, {"input": "98765", "output": "5", "explanation": "9 - 8 + 7 - 6 + 5 = 7"}, {"input": "0", "output": "0", "explanation": "The sum of digits in 0 is 0."}, {"input": "100001", "output": "2", "explanation": "1 - 0 + 0 - 0 + 0 - 1 = 0\n\nConstraints:\n- The input integer will be non-negative.\n- The function should handle integers with any number of digits.\n- There are no specific time/space complexity requirements for this easy level problem, but a solution with linear time complexity is expected."}], "constraints": ["- The input integer will be non-negative.", "- The function should handle integers with any number of digits.", "- There are no specific time/space complexity requirements for this easy level problem, but a solution with linear time complexity is expected."], "function_signature": {"java": "public int alternatingSumOfDigits(int n) { // Your code here }", "cpp": "int alternatingSumOfDigits(int n) { // Your code here }", "python": "def alternating_sum_of_digits(n): # Your code here\n    pass"}, "id": "897bc619e54f8f99c5c21bd79169b1f9"}