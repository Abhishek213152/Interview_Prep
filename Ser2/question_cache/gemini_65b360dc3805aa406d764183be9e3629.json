{"title": "Queue-Based Circular Bakery", "difficulty": "Easy", "category": "queues", "description": "A circular bakery has a single queue for orders.  Customers arrive and place their orders, which are processed in a FIFO (First-In, First-Out) manner. However, the bakery has a special \"priority\" system:  every 3rd order receives a free pastry!  Implement a function that simulates this bakery queue and determines how many free pastries were given out.  Assume orders are represented by integers (order numbers).", "examples": [{"input": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "output": "3", "explanation": "Orders 3, 6, and 9 received a free pastry."}, {"input": "[10, 20, 30, 40, 50]", "output": "1", "explanation": "Order 30 received a free pastry."}, {"input": "[]", "output": "0", "explanation": "No orders, no free pastries.\n\nConstraints:\n- The input is a list of integers representing order numbers.  The list can be empty.\n- Order numbers are positive integers.\n- The time complexity should be O(n), where n is the number of orders.\n- The space complexity should be O(n) in the worst case (due to queue storage).  However,  a solution using only a single queue is preferable."}], "constraints": ["- The input is a list of integers representing order numbers.  The list can be empty.", "- Order numbers are positive integers.", "- The time complexity should be O(n), where n is the number of orders.", "- The space complexity should be O(n) in the worst case (due to queue storage).  However,  a solution using only a single queue is preferable."], "function_signature": {"java": "public int countFreePastries(java.util.Queue<Integer> orders) { // Your code here }", "cpp": "int countFreePastries(std::queue<int> orders) { // Your code here }", "python": "def count_free_pastries(orders): # Your code here\n    pass"}, "id": "65b360dc3805aa406d764183be9e3629"}