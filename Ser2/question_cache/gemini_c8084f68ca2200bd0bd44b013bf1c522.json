{"title": "Maximizing Profit with Binary Search on Production Rates", "difficulty": "Medium", "category": "binary search", "description": "You are managing a factory that produces widgets.  The factory has a variable production rate depending on the number of workers employed. You are given a sorted array `productionRates` where `productionRates[i]` represents the number of widgets produced per day if you employ `i + 1` workers (index 0 represents 1 worker, index 1 represents 2 workers, and so on).  Each widget sells for a price of `widgetPrice` dollars.  However, each worker costs `workerCost` dollars per day.  Find the maximum profit you can achieve in a single day by choosing the optimal number of workers to employ.  Profit is calculated as (widgets produced * widgetPrice) - (number of workers * workerCost). Use binary search to efficiently find the optimal number of workers.", "examples": [{"input": "`productionRates = [10, 25, 45, 60, 70, 75], widgetPrice = 5, workerCost = 10`", "output": "`175`", "explanation": "Employing 5 workers (index 4) yields 70 widgets * $5/widget = $350 revenue.  The cost is 5 workers * $10/worker = $50.  Profit = $350 - $50 = $175. This is the maximum profit achievable."}, {"input": "`productionRates = [5, 12, 20, 25, 27, 28], widgetPrice = 2, workerCost = 8`", "output": "`16`", "explanation": "Employing 3 workers (index 2) yields 20 widgets * $2/widget = $40 revenue. The cost is 3 workers * $8/worker = $24. Profit = $40 - $24 = $16. This is the maximum profit achievable.  Employing more workers leads to diminishing returns.\n\nConstraints:\n- `1 <= productionRates.length <= 10^5`\n- `productionRates` is a non-decreasing array of positive integers.\n- `1 <= widgetPrice <= 100`\n- `1 <= workerCost <= 100`\n- Time complexity should be O(log n), where n is the length of `productionRates`.\n- Space complexity should be O(1)."}], "constraints": ["- `1 <= productionRates.length <= 10^5`", "- `productionRates` is a non-decreasing array of positive integers.", "- `1 <= widgetPrice <= 100`", "- `1 <= workerCost <= 100`", "- Time complexity should be O(log n), where n is the length of `productionRates`.", "- Space complexity should be O(1)."], "function_signature": {"java": "public int maxProfit(int[] productionRates, int widgetPrice, int workerCost) { // Your code here }", "cpp": "int maxProfit(const std::vector<int>& productionRates, int widgetPrice, int workerCost) { // Your code here }", "python": "def max_profit(production_rates, widget_price, worker_cost): # Your code here\n    pass"}, "id": "c8084f68ca2200bd0bd44b013bf1c522"}