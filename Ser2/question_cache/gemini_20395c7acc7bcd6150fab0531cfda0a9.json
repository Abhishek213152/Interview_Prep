{"title": "Sort the Jars by Capacity", "difficulty": "Easy", "category": "sorting", "description": "You are given a list of strings representing the capacities of jars.  Each string is in the format \"X mL\", where X is an integer representing the volume in milliliters.  Sort the jars in ascending order of their capacity.  Return a new list of strings representing the sorted jars.", "examples": [{"input": "[\"100 mL\", \"50 mL\", \"200 mL\", \"75 mL\"]", "output": "[\"50 mL\", \"75 mL\", \"100 mL\", \"200 mL\"]", "explanation": "The jars are sorted based on their milliliter capacity (50, 75, 100, 200)."}, {"input": "[\"10 mL\", \"1000 mL\", \"500 mL\", \"25 mL\", \"1 mL\"]", "output": "[\"1 mL\", \"10 mL\", \"25 mL\", \"500 mL\", \"1000 mL\"]", "explanation": "The jars are sorted in ascending order of their capacities.\n\nConstraints:\n- The input list will contain at least one jar.\n- Each string in the input list will be in the format \"X mL\", where X is a positive integer.\n- The integer X will be within the range [1, 10000].\n- No error handling for malformed input is required.  You can assume the input format is always correct.\n- Time complexity should be O(n log n), where n is the number of jars.  Space complexity should be O(n)."}], "constraints": ["- The input list will contain at least one jar.", "- Each string in the input list will be in the format \"X mL\", where X is a positive integer.", "- The integer X will be within the range [1, 10000].", "- No error handling for malformed input is required.  You can assume the input format is always correct.", "- Time complexity should be O(n log n), where n is the number of jars.  Space complexity should be O(n)."], "function_signature": {"java": "public java.util.List<String> sortJars(java.util.List<String> jars) { // Your code here }", "cpp": "std::vector<std::string> sortJars(std::vector<std::string>& jars) { // Your code here }", "python": "def sort_jars(jars): # Your code here\n    pass"}, "id": "20395c7acc7bcd6150fab0531cfda0a9"}