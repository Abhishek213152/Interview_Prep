{"title": "LinkedList Palindrome Partitioning with Minimum Partitions", "difficulty": "Medium", "category": "linked lists", "description": "Given a singly linked list, partition it into multiple sub-lists such that each sub-list is a palindrome.  Find the minimum number of partitions required to achieve this.  Return -1 if it is impossible to partition the linked list into palindromic sub-lists.", "examples": [{"input": "1 -> 2 -> 3 -> 2 -> 1 -> 4 -> 5 -> 5 -> 4", "output": "2", "explanation": "The list can be partitioned into [1 -> 2 -> 3 -> 2 -> 1] and [4 -> 5 -> 5 -> 4], which are both palindromes."}, {"input": "1 -> 2 -> 1 -> 3 -> 4", "output": "3", "explanation": "The list can be partitioned into [1], [2], [1], [3], [4]. Each sublist is a palindrome (of length 1)."}, {"input": "1 -> 2 -> 3 -> 4 -> 5", "output": "5", "explanation": "Each node forms a palindrome sublist."}, {"input": "null", "output": "0", "explanation": "An empty list requires zero partitions.\n\n\nConstraints:\n- The linked list can contain up to 10^5 nodes.\n- The value of each node is an integer between -1000 and 1000.\n- Time Complexity: O(n^2), where n is the number of nodes in the linked list.  (More efficient solutions are possible but not required for a Medium-level problem).\n- Space Complexity: O(n)"}], "constraints": ["- The linked list can contain up to 10^5 nodes.", "- The value of each node is an integer between -1000 and 1000.", "- Time Complexity: O(n^2), where n is the number of nodes in the linked list.  (More efficient solutions are possible but not required for a Medium-level problem).", "- Space Complexity: O(n)"], "function_signature": {"java": "public int minPalindromePartitions(ListNode head) { // Your code here }", "cpp": "int minPalindromePartitions(ListNode *head) { // Your code here }", "python": "def min_palindrome_partitions(head): # Your code here\n    pass"}, "id": "2ac59a99af3c2c9c0dccf0d204078ced"}