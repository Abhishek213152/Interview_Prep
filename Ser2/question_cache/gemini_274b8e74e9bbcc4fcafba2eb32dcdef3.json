{"title": "Binary String to Decimal with Weighted Bits", "difficulty": "Easy", "category": "bit manipulation", "description": "Given a binary string  `s` representing a number, and a second string `weights` representing a set of weights for each bit,  calculate the decimal value of the binary string using these weights.  The weights are applied from the least significant bit (rightmost) to the most significant bit (leftmost).  The least significant bit's weight is given by the first character in `weights`, the next bit's weight is the second character, and so on.  Assume both strings are of the same length and only contain '0' or '1' characters.  If a bit is '1', its corresponding weight is added to the total sum.", "examples": [{"input": "`s = \"1011\"`, `weights = \"2134\"`", "output": "11", "explanation": "(1 * 4) + (1 * 3) + (0 * 1) + (1 * 2) = 11"}, {"input": "`s = \"0010\"`, `weights = \"5678\"`", "output": "7", "explanation": "(0 * 8) + (1 * 7) + (0 * 6) + (0 * 5) = 7"}, {"input": "`s = \"1111\"`, `weights = \"1111\"`", "output": "4", "explanation": "(1 * 1) + (1 * 1) + (1 * 1) + (1 * 1) = 4\n\n\nConstraints:\n- `1 <= len(s) <= 10`\n- `len(s) == len(weights)`\n- `s` and `weights` contain only '0' and '1' characters.\n- `weights` can contain any order of digits.\n- Time complexity should be O(n), where n is the length of the string.\n- Space complexity should be O(1)."}], "constraints": ["- `1 <= len(s) <= 10`", "- `len(s) == len(weights)`", "- `s` and `weights` contain only '0' and '1' characters.", "- `weights` can contain any order of digits.", "- Time complexity should be O(n), where n is the length of the string.", "- Space complexity should be O(1)."], "function_signature": {"java": "public long calculateWeightedDecimal(String s, String weights) { // Your code here }", "cpp": "long long calculateWeightedDecimal(const std::string& s, const std::string& weights) { // Your code here }", "python": "def calculate_weighted_decimal(s: str, weights: str) -> int:\n    pass"}, "id": "274b8e74e9bbcc4fcafba2eb32dcdef3"}