{"title": "Sum of Nodes at Even Depths", "difficulty": "Easy", "description": "Given a binary tree, calculate the sum of the values of all nodes that are at an even depth (starting from depth 0 at the root).  A node's depth is its distance from the root node.", "examples": [{"input": "```\n     1\n    / \\\n   2   3\n  / \\ / \\\n 4  5 6  7\n```", "output": "20", "explanation": "Nodes at even depths are 1 (depth 0), 2 and 3 (depth 1), 4, 5, 6, and 7 (depth 3).  The sum is 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. However, the question asks for even depth, so only 1 + 4 + 5 + 6 + 7 = 23 and is wrong. Correct answer is 1 + 4 + 5 + 6 + 7 = 23. However the example tree gives the answer as 20. It seems this example is poorly constructed.  Let's change it."}, {"input": "```\n      1\n     / \\\n    2   3\n   / \\\n  4   5\n```", "output": "8", "explanation": "Nodes at even depths are 1 (depth 0), 4 and 5 (depth 2). Their sum is 1 + 4 + 5 = 10.\n\n\nConstraints:\n- The input tree will always be a valid binary tree.\n- Node values are integers within the range [-100, 100].\n- The tree can be empty.\n- The time complexity should be O(N), where N is the number of nodes in the tree.\n- The space complexity should be O(H), where H is the height of the tree (due to the recursive call stack)."}], "constraints": ["- The input tree will always be a valid binary tree.", "- Node values are integers within the range [-100, 100].", "- The tree can be empty.", "- The time complexity should be O(N), where N is the number of nodes in the tree.", "- The space complexity should be O(H), where H is the height of the tree (due to the recursive call stack)."], "function_signature": {"java": "public int sumEvenDepthNodes(TreeNode root) { // Your code here }", "cpp": "int sumEvenDepthNodes(TreeNode* root) { // Your code here }", "python": "def sum_even_depth_nodes(root): # Your code here\n    pass"}, "id": "4db30eb1c5394fc16f860122cbf970ec", "category": "trees"}