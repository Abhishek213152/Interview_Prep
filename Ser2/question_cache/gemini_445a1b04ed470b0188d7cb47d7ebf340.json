{"title": "Optimized Task Scheduling with Queue Prioritization", "difficulty": "Medium", "category": "queues", "description": "You are given a stream of tasks represented as tuples (task_id, priority, processing_time).  Tasks arrive one at a time.  You need to design a system that schedules these tasks using a priority queue, but with an optimization:  if a task's priority is higher than the average priority of all tasks currently in the queue, it should be processed immediately, bypassing the queue. Otherwise, it's added to the queue.  After processing an immediate task, recalculate the average priority. The output should be the order in which tasks are processed.", "examples": [{"input": "[(1, 5, 2), (2, 2, 1), (3, 8, 3), (4, 3, 2), (5, 6, 1)]", "output": "[3, 1, 5, 2, 4]", "explanation": "- Task 3 (priority 8) arrives.  The queue is empty, so average priority is 0.  8 > 0, so task 3 is processed immediately.\n   - Task 1 (priority 5) arrives.  The queue contains [2, 4]. Average priority is (2+3)/2 = 2.5. 5 > 2.5, so task 1 is processed immediately.\n   - Task 5 (priority 6) arrives. The queue contains [2,4]. Average priority is 2.5. 6 > 2.5, so task 5 is processed immediately.\n   - Task 2 (priority 2) arrives. The queue is empty. Average priority is 0. 2 > 0, it is processed immediately.\n   - Task 4 (priority 3) arrives. The queue is empty, average priority is 0. 3 > 0, so task 4 is processed immediately."}, {"input": "[(1, 1, 1), (2, 2, 2), (3, 3, 3), (4, 4, 4)]", "output": "[1, 2, 3, 4]", "explanation": "- Task 1 arrives, queue is empty, average is 0. 1 > 0, processed immediately.\n   - Task 2 arrives, queue is empty, average is 0. 2 > 0, processed immediately.\n   - Task 3 arrives, queue is empty, average is 0. 3 > 0, processed immediately.\n   - Task 4 arrives, queue is empty, average is 0. 4 > 0, processed immediately.\n\n\nConstraints:\n- 1 <= task_id <= 100000 (task IDs are unique)\n- 1 <= priority <= 1000\n- 1 <= processing_time <= 100\n- The number of tasks will be at most 10000.\n- Time complexity should be O(N log N), where N is the number of tasks.  Space complexity should be O(N) in the worst case."}], "constraints": ["- 1 <= task_id <= 100000 (task IDs are unique)", "- 1 <= priority <= 1000", "- 1 <= processing_time <= 100", "- The number of tasks will be at most 10000.", "- Time complexity should be O(N log N), where N is the number of tasks.  Space complexity should be O(N) in the worst case."], "function_signature": {"java": "public List<Integer> scheduleTasks(List<Tuple<Integer, Integer, Integer>> tasks) { // Your code here }", "cpp": "std::vector<int> scheduleTasks(const std::vector<std::tuple<int, int, int>>& tasks) { // Your code here }", "python": "def schedule_tasks(tasks): # Your code here\n    pass"}, "id": "445a1b04ed470b0188d7cb47d7ebf340"}