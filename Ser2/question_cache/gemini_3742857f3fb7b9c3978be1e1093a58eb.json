{"title": "Longest Balanced Subarray Sum", "difficulty": "Medium", "category": "two pointers", "description": "Given an array of integers `nums`, find the length of the longest subarray where the sum of its elements is divisible by `k`, and the subarray contains an equal number of positive and negative elements.  Return 0 if no such subarray exists.", "examples": [{"input": "nums = [2, -2, 1, -1, 3, -3, 4, -4] , k = 5", "output": "8", "explanation": "The subarray [2, -2, 1, -1, 3, -3, 4, -4] has a sum of 0 (divisible by 5), and contains 4 positive and 4 negative numbers."}, {"input": "nums = [1, 2, 3, 4, 5] , k = 3", "output": "0", "explanation": "No subarray satisfies both conditions."}, {"input": "nums = [-1, 1, -2, 2, -3, 3], k = 0", "output": "6", "explanation": "The entire array sums to 0 (divisible by 0, which we treat as true in this case), and contains 3 positive and 3 negative numbers.  Note that division by zero is handled here, considering any subarray with a sum of 0 satisfies the divisibility constraint when k = 0.\n\n\nConstraints:\n- 1 <= len(nums) <= 10^5\n- -10^4 <= nums[i] <= 10^4\n- 0 <= k <= 10^5\n- Time complexity should be O(n)\n- Space complexity should be O(1) (excluding the input array)"}], "constraints": ["- 1 <= len(nums) <= 10^5", "- -10^4 <= nums[i] <= 10^4", "- 0 <= k <= 10^5", "- Time complexity should be O(n)", "- Space complexity should be O(1) (excluding the input array)"], "function_signature": {"java": "public int longestSubarrayDivisibleByK(int[] nums, int k) { // Your code here }", "cpp": "int longestSubarrayDivisibleByK(const std::vector<int>& nums, int k) { // Your code here }", "python": "def longest_subarray_divisible_by_k(nums, k): # Your code here\n    pass"}, "id": "3742857f3fb7b9c3978be1e1093a58eb"}