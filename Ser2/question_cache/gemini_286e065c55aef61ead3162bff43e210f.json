{"title": "Duplicate Word Finder in a Sentence with Hashing", "difficulty": "Easy", "category": "hashing", "description": "Given a sentence (string), determine if any word appears more than once using a hash table (dictionary in Python).  Return `True` if any duplicate word is found, otherwise return `False`.  You should handle cases with different capitalization of the same word (treat \"Hello\" and \"hello\" as the same word).", "examples": [{"input": "\"This is a test sentence a test\"", "output": "True", "explanation": "The word \"a\" and the word \"test\" appear more than once."}, {"input": "\"The quick brown fox jumps over the lazy dog.\"", "output": "True", "explanation": "The word \"the\" appears more than once."}, {"input": "\"Every word is unique\"", "output": "False", "explanation": "All words appear only once."}, {"input": "\"HELLO hello world WORLD\"", "output": "True", "explanation": "\"HELLO\" and \"hello\" are considered the same word.\n\n\nConstraints:\n- The input sentence will contain only alphabetical characters and spaces.\n- The input sentence will not be empty.\n- The words in the sentence are separated by single spaces.\n- Time complexity should be O(n), where n is the number of words in the sentence.\n- Space complexity should be O(n) in the worst case (all words are unique)."}], "constraints": ["- The input sentence will contain only alphabetical characters and spaces.", "- The input sentence will not be empty.", "- The words in the sentence are separated by single spaces.", "- Time complexity should be O(n), where n is the number of words in the sentence.", "- Space complexity should be O(n) in the worst case (all words are unique)."], "function_signature": {"java": "public boolean containsDuplicateWords(String sentence) { // Your code here }", "cpp": "bool containsDuplicateWords(const std::string& sentence) { // Your code here }", "python": "def contains_duplicate_words(sentence): # Your code here\n    pass"}, "id": "286e065c55aef61ead3162bff43e210f"}