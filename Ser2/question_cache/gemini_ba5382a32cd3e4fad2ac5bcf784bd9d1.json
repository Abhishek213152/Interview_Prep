{"title": "Optimal Resource Allocation with Decay", "difficulty": "Medium", "category": "dynamic programming", "description": "You are managing a project requiring the allocation of a limited resource (e.g., budget, manpower) across multiple tasks. Each task `i` requires `r[i]` units of the resource and provides a value `v[i]` upon completion.  However, the resource's effectiveness decays over time.  The decay factor is represented by a sequence `d`, where `d[j]` is the decay factor applied after completing `j` tasks.  This means that the value of a task completed after `j` tasks is reduced to `v[i] * d[j]`.  You must complete all tasks, and the order of task completion impacts the final total value. Find the maximum possible total value achievable after completing all tasks.", "examples": [{"input": "`r = [2, 3, 1]` (resource requirements)\n   `v = [5, 7, 3]` (task values)\n   `d = [1.0, 0.9, 0.8]` (decay factors)", "output": "13.1", "explanation": "Complete task 2 (v=7) first.  Then, task 1 (v=5 * 0.9 = 4.5). Finally, task 3 (v=3 * 0.8 = 2.4). Total value: 7 + 4.5 + 2.4 = 13.9.  Another ordering (1, 2, 3) yields: 5 + (7 * 0.9) + (3 * 0.8) = 5 + 6.3 + 2.4 = 13.7. The optimal ordering is (2,1,3) or permutations that give the same total value as (2,1,3).  (Note: slight variations in floating point arithmetic may lead to answers very close to 13.9)"}, {"input": "`r = [1, 2, 1, 3]`\n   `v = [10, 5, 8, 12]`\n   `d = [1.0, 0.95, 0.9, 0.85]`", "output": "31.35", "explanation": "An optimal solution might be (1,2,3,4) -> 10 + (5 * 0.95) + (8*0.9) + (12*0.85) = 10 + 4.75 + 7.2 + 10.2 = 32.15  or another permutation that gives a similar result.  Consider other orderings to find the maximum.\n\n\n\nConstraints:\n- 1 <= len(r) <= 10  (small number of tasks to allow for brute-force verification if needed, otherwise a more optimized DP solution is required)\n- len(r) == len(v) == len(d)\n- all r[i], v[i] >= 0\n- all d[i] are in the range [0.0, 1.0] (inclusive)\n- Time complexity should be better than O(n!), where n is the number of tasks.  A polynomial time solution is expected.  (Hint: Dynamic Programming)\n- Space complexity should be polynomial in n."}], "constraints": ["- 1 <= len(r) <= 10  (small number of tasks to allow for brute-force verification if needed, otherwise a more optimized DP solution is required)", "- len(r) == len(v) == len(d)", "- all r[i], v[i] >= 0", "- all d[i] are in the range [0.0, 1.0] (inclusive)", "- Time complexity should be better than O(n!), where n is the number of tasks.  A polynomial time solution is expected.  (Hint: Dynamic Programming)", "- Space complexity should be polynomial in n."], "function_signature": {"java": "public double maxTotalValue(int[] r, double[] v, double[] d) { // Your code here }", "cpp": "double maxTotalValue(const std::vector<int>& r, const std::vector<double>& v, const std::vector<double>& d) { // Your code here }", "python": "def max_total_value(r, v, d): # Your code here\n    pass"}, "id": "ba5382a32cd3e4fad2ac5bcf784bd9d1"}