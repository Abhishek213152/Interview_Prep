{"title": "Hashing for Efficient Locker Combination Retrieval", "difficulty": "Easy", "description": "You are designing a system for a locker room. Each locker has a unique 4-digit combination (represented as a string).  Instead of storing the combinations directly, you decide to use a hash table to store them for faster retrieval.  You will use a simple hashing function:  sum the ASCII values of the digits, modulo 100.  Given a list of locker combinations and a target combination, determine if that target combination exists in the locker room using your hash table. Handle collisions using separate chaining.", "examples": [{"input": "`combinations = [\"1234\", \"5678\", \"9012\", \"1111\"]`\n   `target = \"1234\"`", "output": "`True`", "explanation": "The hash value for \"1234\" is (49 + 50 + 51 + 52) % 100 = 202 % 100 = 2.  The hash table is checked at index 2, and \"1234\" is found."}, {"input": "`combinations = [\"1234\", \"5678\", \"9012\", \"1111\"]`\n   `target = \"0000\"`", "output": "`False`", "explanation": "The hash value for \"0000\" is (48 + 48 + 48 + 48) % 100 = 192 % 100 = 92.  The hash table is checked at index 92, and \"0000\" is not found."}, {"input": "`combinations = [\"1234\", \"1235\", \"1236\"]`\n   `target = \"1235\"`", "output": "`True`", "explanation": "\"1234\", \"1235\", and \"1236\" will likely collide.  Separate chaining correctly handles this collision.\n\n\nConstraints:\n- The locker combinations will always be 4-digit strings consisting only of digits 0-9.\n- The number of locker combinations will be less than or equal to 1000.\n- The target combination will always be a 4-digit string consisting only of digits 0-9.\n- Time complexity should be O(n) in the worst case (due to potential collisions), where n is the number of combinations.  Average case should be O(1).\n- Space complexity should be O(m) where m is the size of the hash table (100 in this case)."}], "constraints": ["- The locker combinations will always be 4-digit strings consisting only of digits 0-9.", "- The number of locker combinations will be less than or equal to 1000.", "- The target combination will always be a 4-digit string consisting only of digits 0-9.", "- Time complexity should be O(n) in the worst case (due to potential collisions), where n is the number of combinations.  Average case should be O(1).", "- Space complexity should be O(m) where m is the size of the hash table (100 in this case)."], "function_signature": {"java": "public boolean checkCombinationExists(String[] lockerCombinations, String targetCombination) { // Your code here }", "cpp": "bool checkCombinationExists(const std::vector<std::string>& lockerCombinations, const std::string& targetCombination) { // Your code here }", "python": "def check_combination_exists(locker_combinations, target_combination): # Your code here\n    pass"}, "id": "a4a93a03b2dd0a06244516d3d38dfbf3", "category": "hashing"}