{"title": "Frequency of Anagram Pairs", "difficulty": "Easy", "category": "hashing", "description": "Given a list of strings, find the number of pairs of strings that are anagrams of each other.  An anagram is a word or phrase formed by rearranging the letters of another word or phrase.  For example, \"listen\" and \"silent\" are anagrams.  The function should return an integer representing the count of anagram pairs.", "examples": [{"input": "[\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"]", "output": "3", "explanation": "The anagram pairs are (\"eat\", \"tea\"), (\"eat\", \"ate\"), (\"tan\", \"nat\").  Note that (\"tea\", \"ate\") is not counted separately as it's already covered in the previous pair."}, {"input": "[\"racer\", \"carer\", \"racar\", \"caarr\"]", "output": "2", "explanation": "The anagram pairs are (\"racer\", \"carer\"), (\"racer\", \"racar\").\n\n\nConstraints:\n- The input list will contain only lowercase English alphabet characters.\n- The length of each string in the list will be between 1 and 10.\n- The length of the input list will be between 1 and 1000.\n- Time complexity should be O(n*k), where n is the number of strings and k is the maximum length of a string.\n- Space complexity should be O(n*k) in the worst case."}], "constraints": ["- The input list will contain only lowercase English alphabet characters.", "- The length of each string in the list will be between 1 and 10.", "- The length of the input list will be between 1 and 1000.", "- Time complexity should be O(n*k), where n is the number of strings and k is the maximum length of a string.", "- Space complexity should be O(n*k) in the worst case."], "function_signature": {"java": "public int countAnagramPairs(List<String> strings) { // Your code here }", "cpp": "int countAnagramPairs(const std::vector<std::string>& strings) { // Your code here }", "python": "def count_anagram_pairs(strings): # Your code here\n    pass"}, "id": "580aa35a7784d73b918a40bb7109abf1"}