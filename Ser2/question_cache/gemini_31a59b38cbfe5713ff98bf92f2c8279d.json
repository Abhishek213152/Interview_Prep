{"title": "Recursive Digit Summation with Skipping", "difficulty": "Easy", "category": "recursion", "description": "Write a recursive function `recursive_skip_sum(n, skip)` that calculates the sum of digits of a positive integer `n`, but skips every `skip`-th digit (starting from the first digit).  If `skip` is 1, the function should return 0. If `skip` is greater than the number of digits, it should sum all digits.", "examples": [{"input": "n = 12345, skip = 2", "output": "9", "explanation": "The digits are 1, 2, 3, 4, 5. Skipping every second digit (1, 3, 5), the sum is 1 + 3 + 5 = 9."}, {"input": "n = 9876, skip = 3", "output": "15", "explanation": "The digits are 9, 8, 7, 6. Skipping every third digit (9, 8, 6), the sum is 9 + 8 + 6 = 23.  Note that we skip the 7."}, {"input": "n = 12345, skip = 1", "output": "0", "explanation": "All digits are skipped since skip=1."}, {"input": "n = 12345, skip = 6", "output": "15", "explanation": "skip is larger than the number of digits, so all digits are summed: 1 + 2 + 3 + 4 + 5 = 15\n\n\nConstraints:\n- `n` will be a positive integer.\n- `skip` will be a positive integer.\n- Time complexity should be O(log n), where n is the input number.\n- Space complexity should be O(log n) due to the recursive call stack."}], "constraints": ["- `n` will be a positive integer.", "- `skip` will be a positive integer.", "- Time complexity should be O(log n), where n is the input number.", "- Space complexity should be O(log n) due to the recursive call stack."], "function_signature": {"java": "public int recursive_skip_sum(int n, int skip) { // Your code here }", "cpp": "int recursive_skip_sum(int n, int skip) { // Your code here }", "python": "def recursive_skip_sum(n, skip): # Your code here\n    pass"}, "id": "31a59b38cbfe5713ff98bf92f2c8279d"}