{"title": "Optimal Parcel Packing with Variable-Sized Boxes", "difficulty": "Medium", "category": "greedy", "description": "You are given a list of parcels, each with a specified weight `w_i`, and a list of boxes, each with a specified maximum weight capacity `c_j`.  Each parcel must be placed in exactly one box.  The goal is to minimize the number of boxes used.  A box can only hold parcels whose total weight does not exceed its capacity.  Design an algorithm to determine the minimum number of boxes needed and which parcels go into each box.  Note that the weights of parcels and boxes are not necessarily integers.", "examples": [{"input": "Parcels: [2.5, 1.8, 3.2, 1.5, 2.1]\n   Boxes: [5.0, 4.0, 3.5]", "output": "Minimum Boxes Used: 2\n   Box Assignments: [[2.5, 1.5],[1.8, 3.2], [2.1]]  (Order within boxes doesn't matter)", "explanation": "We can use the first box for parcels with weights 2.5 and 1.5 (total 4.0 <= 5.0). The second box can hold 1.8 and 3.2 (total 5.0 <= 4.0 is incorrect, should be <=5.0.  Should have been 5.0). The third box holds the remaining parcel with weight 2.1.  We used only 2 boxes."}, {"input": "Parcels: [1.0, 2.0, 3.0, 4.0, 1.5]\n   Boxes: [5.0, 3.0, 2.0]", "output": "Minimum Boxes Used: 3\n   Box Assignments: [[4.0,1.0], [3.0], [2.0, 1.5]]", "explanation": "We need at least 3 boxes to accommodate all parcels.  One possible arrangement is shown.\n\n\nConstraints:\n- The number of parcels (n) and boxes (m) will be in the range [1, 100].\n- Parcel weights `w_i` and box capacities `c_j` will be positive floating-point numbers.\n- The sum of parcel weights may be greater than the sum of box capacities.  If this is the case, your algorithm should indicate that all parcels cannot be accommodated.\n- Time complexity should be better than O(n! * m!).  A solution with polynomial time complexity is preferred.  Consider O(n*m*log(m)) or better.\n- Space complexity should be polynomial in n and m."}], "constraints": ["- The number of parcels (n) and boxes (m) will be in the range [1, 100].", "- Parcel weights `w_i` and box capacities `c_j` will be positive floating-point numbers.", "- The sum of parcel weights may be greater than the sum of box capacities.  If this is the case, your algorithm should indicate that all parcels cannot be accommodated.", "- Time complexity should be better than O(n! * m!).  A solution with polynomial time complexity is preferred.  Consider O(n*m*log(m)) or better.", "- Space complexity should be polynomial in n and m."], "function_signature": {"java": "public Pair<Integer, List<List<Double>>> minBoxes(List<Double> parcelWeights, List<Double> boxCapacities) { // Your code here }", "cpp": "std::pair<int, std::vector<std::vector<double>>> minBoxes(const std::vector<double>& parcelWeights, const std::vector<double>& boxCapacities) { // Your code here }", "python": "def min_boxes(parcel_weights, box_capacities): # Your code here\n    pass"}, "id": "695096631c8ce508bcb2bad17721289f"}