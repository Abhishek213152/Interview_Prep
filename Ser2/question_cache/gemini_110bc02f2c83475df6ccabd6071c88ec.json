{"title": "Interleave Even and Odd Nodes", "difficulty": "Easy", "category": "linked lists", "description": "Given a singly linked list, rearrange the nodes such that all even-indexed nodes appear before all odd-indexed nodes.  Maintain the original relative order of even-indexed and odd-indexed nodes amongst themselves.  Indexing starts at 0.", "examples": [{"input": "1 -> 2 -> 3 -> 4 -> 5 -> 6 -> NULL", "output": "1 -> 3 -> 5 -> 2 -> 4 -> 6 -> NULL", "explanation": "Even-indexed nodes (0, 2, 4) are 1, 3, 5. Odd-indexed nodes (1, 3, 5) are 2, 4, 6.  The rearranged list maintains the original order within even and odd groups."}, {"input": "10 -> 20 -> 30 -> NULL", "output": "10 -> 30 -> 20 -> NULL", "explanation": "Even-indexed nodes (0, 2) are 10, 30. Odd-indexed nodes (1) is 20."}, {"input": "NULL", "output": "NULL", "explanation": "An empty list remains empty.\n\n\nConstraints:\n- The linked list may be empty.\n- The values in the nodes are integers.\n- No specific time or space complexity requirements are enforced for this easy problem, but an efficient solution is preferred.  (O(n) time and O(1) space is achievable)."}], "constraints": ["- The linked list may be empty.", "- The values in the nodes are integers.", "- No specific time or space complexity requirements are enforced for this easy problem, but an efficient solution is preferred.  (O(n) time and O(1) space is achievable)."], "function_signature": {"java": "public ListNode rearrangeEvenOdd(ListNode head) { // Your code here }", "cpp": "ListNode* rearrangeEvenOdd(ListNode* head) { // Your code here }", "python": "def rearrange_even_odd(head): # Your code here\n    pass"}, "id": "110bc02f2c83475df6ccabd6071c88ec"}