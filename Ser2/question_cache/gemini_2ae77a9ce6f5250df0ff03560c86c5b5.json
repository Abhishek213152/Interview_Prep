{"title": "Queue-Based Circular Bakery", "difficulty": "Easy", "category": "queues", "description": "A circular bakery has N customers waiting in a queue.  Each customer has an order number (a unique integer). The bakery serves customers in a FIFO (First-In, First-Out) manner. However, due to a special promotion, every Kth customer gets their order served immediately, jumping the queue. Implement a system using a queue to handle this scenario.  Your function should simulate the process and return the order in which customers are served.", "examples": [{"input": "`N = 5, K = 2, customer_order = [1, 2, 3, 4, 5]`", "output": "`[1, 2, 4, 5, 3]`", "explanation": "Customer 2 (order number 2) is served immediately due to the promotion. Then, 1, 4, and 5 are served in order, followed by 3 (which was originally 3rd)."}, {"input": "`N = 7, K = 3, customer_order = [10, 20, 30, 40, 50, 60, 70]`", "output": "`[10, 20, 40, 50, 70, 30, 60]`", "explanation": "Customers 30 (3rd), 60 (6th) are served immediately every 3rd customer.\n\n\nConstraints:\n- 1 <= N <= 1000\n- 1 <= K <= N\n- customer_order will contain N unique positive integers.\n- The time and space complexity should be linear, O(N)."}], "constraints": ["- 1 <= N <= 1000", "- 1 <= K <= N", "- customer_order will contain N unique positive integers.", "- The time and space complexity should be linear, O(N)."], "function_signature": {"java": "public List<Integer> serveCustomers(Queue<Integer> customers, int k) { // Your code here }", "cpp": "std::vector<int> serveCustomers(std::queue<int> customers, int k) { // Your code here }", "python": "def serve_customers(customers, k): # Your code here\n    pass"}, "id": "2ae77a9ce6f5250df0ff03560c86c5b5"}