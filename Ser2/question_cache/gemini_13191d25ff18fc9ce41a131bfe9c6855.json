{"title": "Finding the Closest Palindrome in a Sorted Array", "difficulty": "Easy", "category": "binary search", "description": "Given a sorted array of integers `nums` and a target integer `target`, find the index of the integer in the array that is the closest palindrome to the `target`. If multiple palindromes have the same minimum distance to the target, return the index of the smallest one.  A palindrome is a number that reads the same forwards and backward (e.g., 121, 55, 1001).  If no palindromes exist in the array, return -1.", "examples": [{"input": "`nums = [1, 22, 333, 4444, 5, 6, 77, 1001]`, `target = 500`", "output": "`7`", "explanation": "1001 is the closest palindrome to 500.  The distance is |1001 - 500| = 501."}, {"input": "`nums = [11, 222, 33, 44, 5555, 66, 777, 8888]`, `target = 100`", "output": "`0`", "explanation": "11 is the closest palindrome to 100. The distance is |11-100| = 89.  222 is further away (|222-100| = 122)."}, {"input": "`nums = [1, 2, 3, 4, 5]`, `target = 10`", "output": "`-1`", "explanation": "No palindromes exist in the array.\n\nConstraints:\n- `1 <= nums.length <= 10000`\n- `1 <= nums[i] <= 100000` for all `i`\n- `1 <= target <= 100000`\n- The array `nums` is sorted in ascending order.\n- Time complexity should be O(n log n) or better (where n is the length of the array).  This is achievable by combining binary search with palindrome checking.  Space Complexity should be O(1)."}], "constraints": ["- `1 <= nums.length <= 10000`", "- `1 <= nums[i] <= 100000` for all `i`", "- `1 <= target <= 100000`", "- The array `nums` is sorted in ascending order.", "- Time complexity should be O(n log n) or better (where n is the length of the array).  This is achievable by combining binary search with palindrome checking.  Space Complexity should be O(1)."], "function_signature": {"java": "public int findClosestPalindrome(int[] nums, int target) { // Your code here }", "cpp": "int findClosestPalindrome(const std::vector<int>& nums, int target) { // Your code here }", "python": "def find_closest_palindrome(nums, target): # Your code here\n    pass"}, "id": "13191d25ff18fc9ce41a131bfe9c6855"}