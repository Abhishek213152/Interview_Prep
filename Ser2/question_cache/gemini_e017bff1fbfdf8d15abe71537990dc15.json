{"title": "Sort the Vowels, Keep the Consonants", "difficulty": "Easy", "category": "sorting", "description": "Given a string containing only lowercase English alphabets, sort the vowels (a, e, i, o, u) within the string alphabetically while maintaining the relative order of the consonants.", "examples": [{"input": "\"programming\"", "output": "\"praoggramming\"", "explanation": "The vowels 'o', 'a', 'i' are sorted to 'a', 'i', 'o', and placed back in the string while maintaining the consonant order 'p', 'r', 'g', 'r', 'm', 'm', 'g'"}, {"input": "\"beautiful\"", "output": "\"baaeufitul\"", "explanation": "The vowels 'e', 'a', 'u', 'i' are sorted to 'a', 'e', 'i', 'u', maintaining the consonant order 'b', 't', 'f', 'l'."}, {"input": "\"rhythm\"", "output": "\"rhythm\"", "explanation": "No vowels are present, so the string remains unchanged.\n\n\nConstraints:\n- The input string will contain only lowercase English alphabets.\n- The length of the input string will be between 1 and 1000 characters.\n- Time complexity should be O(n log n) or better, where n is the length of the string.  (Linear time solutions are preferred).\n- Space complexity should be O(n) in the worst case."}], "constraints": ["- The input string will contain only lowercase English alphabets.", "- The length of the input string will be between 1 and 1000 characters.", "- Time complexity should be O(n log n) or better, where n is the length of the string.  (Linear time solutions are preferred).", "- Space complexity should be O(n) in the worst case."], "function_signature": {"java": "public String sortVowels(String str) { // Your code here }", "cpp": "std::string sortVowels(const std::string& str) { // Your code here }", "python": "def sort_vowels(str): # Your code here\n    pass"}, "id": "e017bff1fbfdf8d15abe71537990dc15"}