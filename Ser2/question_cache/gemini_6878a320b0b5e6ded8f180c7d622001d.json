{"title": "Finding the Closest Perfect Square", "difficulty": "Easy", "category": "binary search", "description": "Given a positive integer `n`, find the closest perfect square to `n` using binary search.  If there are two perfect squares equidistant from `n`, return the smaller one.", "examples": [{"input": "10", "output": "9", "explanation": "The perfect squares are 1, 4, 9, 16, 25...  9 is closer to 10 than 16."}, {"input": "20", "output": "16", "explanation": "The perfect squares are 1, 4, 9, 16, 25...  16 is closer to 20 than 25."}, {"input": "25", "output": "25", "explanation": "25 is a perfect square."}, {"input": "50", "output": "49", "explanation": "49 is closer to 50 than 64.\n\n\nConstraints:\n- `n` will be a positive integer.\n- You can assume that the input `n` will be within a range that allows for finding the closest perfect square using integers (avoiding potential overflow issues with very large inputs).  Assume that the calculation `sqrt(n)` will always produce a result which can be handled with standard integer types.\n- Time complexity should be O(log n).\n- Space complexity should be O(1)."}], "constraints": ["- `n` will be a positive integer.", "- You can assume that the input `n` will be within a range that allows for finding the closest perfect square using integers (avoiding potential overflow issues with very large inputs).  Assume that the calculation `sqrt(n)` will always produce a result which can be handled with standard integer types.", "- Time complexity should be O(log n).", "- Space complexity should be O(1)."], "function_signature": {"java": "public int closestPerfectSquare(int n) { // Your code here }", "cpp": "int closestPerfectSquare(int n) { // Your code here }", "python": "def closest_perfect_square(n): # Your code here\n    pass"}, "id": "6878a320b0b5e6ded8f180c7d622001d"}