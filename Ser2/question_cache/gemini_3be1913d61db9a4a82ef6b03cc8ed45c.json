{"title": "Array Segment Sum Maximization with Constraints", "difficulty": "Medium", "category": "arrays", "description": "Given an array of integers `nums` and an integer `k`, find the maximum sum of a contiguous subarray (segment) within `nums` with the following constraints:\n\n1. The segment must have a length greater than or equal to `k`.\n2. The segment must contain at least one negative number.\n3.  The average of the segment must be greater than the average of the entire array.\n\nIf no such segment exists, return -1.", "examples": [{"input": "`nums` = [1, -2, 3, 4, -1, 2, 1, -3, 5], `k` = 3", "output": "8", "explanation": "The segment [3, 4, -1, 2, 1] satisfies all conditions.  Its sum is 8. Its average is 1.6 which is greater than the average of the entire array (0.777...).  Other segments fulfilling all conditions could have smaller sums."}, {"input": "`nums` = [-1, -2, -3, -4, -5], `k` = 2", "output": "-1", "explanation": "No segment satisfies all conditions.  All segments will have negative averages, which are not greater than the average of the entire array."}, {"input": "`nums` = [5, 10, 15, 20, 25], `k` = 2", "output": "-1", "explanation": "No segment contains a negative number.\n\n\nConstraints:\n- 1 <= `len(nums)` <= 10^5\n- -10^4 <= `nums[i]` <= 10^4\n- 1 <= `k` <= `len(nums)`\n- The time complexity should be O(n), where n is the length of `nums`.\n- Space complexity should be O(1) (constant extra space)."}], "constraints": ["- 1 <= `len(nums)` <= 10^5", "- -10^4 <= `nums[i]` <= 10^4", "- 1 <= `k` <= `len(nums)`", "- The time complexity should be O(n), where n is the length of `nums`.", "- Space complexity should be O(1) (constant extra space)."], "function_signature": {"java": "public int maxSumSubarray(int[] nums, int k) { // Your code here }", "cpp": "int maxSumSubarray(const std::vector<int>& nums, int k) { // Your code here }", "python": "def max_sum_subarray(nums, k): # Your code here\n    pass"}, "id": "3be1913d61db9a4a82ef6b03cc8ed45c"}