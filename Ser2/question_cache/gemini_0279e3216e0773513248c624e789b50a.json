{"title": "LinkedList Odd-Even Alternation", "difficulty": "Easy", "category": "linked lists", "description": "Given a singly linked list, rearrange the nodes such that odd-indexed nodes (starting from index 0) appear first, followed by even-indexed nodes.  Maintain the relative order within the odd and even groups.", "examples": [{"input": "1 -> 2 -> 3 -> 4 -> 5 -> NULL", "output": "1 -> 3 -> 5 -> 2 -> 4 -> NULL", "explanation": "Nodes at indices 0, 2, 4 (1, 3, 5) are placed first, followed by nodes at indices 1, 3 (2, 4)."}, {"input": "10 -> 20 -> 30 -> NULL", "output": "10 -> 30 -> 20 -> NULL", "explanation": "Nodes at indices 0, 2 (10, 30) are placed first, followed by the node at index 1 (20)."}, {"input": "NULL", "output": "NULL", "explanation": "An empty list remains empty.\n\n\nConstraints:\n- The linked list may be empty.\n- The values in the nodes are integers.\n- No specific time or space complexity requirements, but an efficient solution is preferred. (O(n) time and O(1) space is achievable)"}], "constraints": ["- The linked list may be empty.", "- The values in the nodes are integers.", "- No specific time or space complexity requirements, but an efficient solution is preferred. (O(n) time and O(1) space is achievable)"], "function_signature": {"java": "public ListNode rearrangeNodes(ListNode head) { // Your code here }", "cpp": "ListNode* rearrangeNodes(ListNode* head) { // Your code here }", "python": "def rearrange_nodes(head): # Your code here\n    pass"}, "id": "0279e3216e0773513248c624e789b50a"}