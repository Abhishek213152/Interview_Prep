{"title": "Frequency of Palindromic Substrings of Length K", "difficulty": "Easy", "category": "hashing", "description": "Given a string `s` and an integer `k`, find the frequency of palindromic substrings of length `k` within `s`.  Use a hash table to efficiently count these palindromes.  Assume `k` will always be greater than or equal to 1 and less than or equal to the length of `s`.", "examples": [{"input": "s = \"aabbaa\", k = 2", "output": "3", "explanation": "The palindromic substrings of length 2 are \"aa\", \"aa\", \"bb\".  There are 3 such substrings."}, {"input": "s = \"abcba\", k = 3", "output": "1", "explanation": "The only palindromic substring of length 3 is \"bcb\"."}, {"input": "s = \"xyzzyx\", k = 1", "output": "6", "explanation": "All substrings of length 1 are palindromes.\n\n\nConstraints:\n- 1 <= k <= len(s) <= 1000\n- s contains only lowercase English alphabets.\n- Time complexity should be O(n), where n is the length of the string.\n- Space complexity should be O(1) for the hash table because the number of possible substrings is at most 26."}], "constraints": ["- 1 <= k <= len(s) <= 1000", "- s contains only lowercase English alphabets.", "- Time complexity should be O(n), where n is the length of the string.", "- Space complexity should be O(1) for the hash table because the number of possible substrings is at most 26."], "function_signature": {"java": "public int countPalindromicSubstrings(String s, int k) { // Your code here }", "cpp": "int countPalindromicSubstrings(const std::string& s, int k) { // Your code here }", "python": "def count_palindromic_substrings(s, k): # Your code here\n    pass"}, "id": "3017bc4c726ac84a97b835cd527b6eec"}