{"title": "Optimized Task Scheduling with Queue Prioritization", "difficulty": "Medium", "category": "queues", "description": "You are given a stream of tasks represented as tuples (task_id, priority, processing_time).  The priority is an integer where lower values indicate higher priority. Tasks arrive one at a time. You need to design a system that processes these tasks using a single processor.  The processor can only handle one task at a time.  However, a higher-priority task can preempt a lower-priority task if it arrives while a lower-priority task is being processed.  When a preemption occurs, the preempted task is added back to the queue, maintaining its original position relative to other tasks.  Implement a function that simulates this system and returns the order in which tasks are completed.  The processing time for each task is the number of time units the processor spends on it.", "examples": [{"input": "[(1, 2, 3), (2, 1, 1), (3, 3, 2), (4, 1, 4)]", "output": "[2, 1, 3, 4]", "explanation": "Task 2 (priority 1) arrives and preempts task 1 (priority 2).  After task 2 completes, task 1 resumes. Then task 3 processes, and finally task 4."}, {"input": "[(1, 1, 5), (2, 2, 2), (3, 3, 1), (4, 1, 3)]", "output": "[1, 4, 2, 3]", "explanation": "Task 1 starts processing. Task 4 (priority 1) preempts Task 1. After Task 4, Task 1 resumes and finishes. Task 2 then processes, and finally Task 3.\n\n\nConstraints:\n- `task_id` is a unique positive integer.\n- `priority` is a positive integer.  Lower values indicate higher priority.\n- `processing_time` is a positive integer.\n- The number of tasks can be up to 1000.\n- Time Complexity: O(N log N), where N is the number of tasks (consider the use of priority queues).\n- Space Complexity: O(N)"}], "constraints": ["- `task_id` is a unique positive integer.", "- `priority` is a positive integer.  Lower values indicate higher priority.", "- `processing_time` is a positive integer.", "- The number of tasks can be up to 1000.", "- Time Complexity: O(N log N), where N is the number of tasks (consider the use of priority queues).", "- Space Complexity: O(N)"], "function_signature": {"java": "public java.util.List<Integer> processTasks(java.util.Queue<java.util.Tuple3<Integer, Integer, Integer>> tasks) { // Your code here }", "cpp": "std::vector<int> processTasks(std::queue<std::tuple<int, int, int>>& tasks) { // Your code here }", "python": "def process_tasks(tasks): # Your code here\n    pass"}, "id": "168598a81f8a425343fa01e74f484a4e"}