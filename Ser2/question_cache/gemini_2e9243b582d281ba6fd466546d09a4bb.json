{"title": "Optimal Resource Allocation with Interdependent Tasks", "difficulty": "Hard", "category": "dynamic programming", "description": "You are managing a project with `n` interdependent tasks. Each task `i` requires `resources[i]` units of a single resource and takes `time[i]` units of time to complete.  Crucially, some tasks depend on others. This dependency is represented by a directed acyclic graph (DAG) where an edge from task `i` to task `j` signifies that task `j` cannot start until task `i` is completed. You have a total of `totalResources` units of the resource available. Your goal is to find the minimum time required to complete all tasks, given the resource constraint.  You can only work on tasks that have their dependencies satisfied and whose resource requirements do not exceed the remaining available resources.  Note that you can work on multiple tasks concurrently as long as the total resource consumption does not exceed `totalResources`.", "examples": [{"input": "`n = 4`\n   `resources = [2, 3, 1, 2]`\n   `time = [5, 3, 2, 4]`\n   `dependencies = [[0, 1], [0, 2], [1, 3], [2, 3]]`  // Adjacency list representing DAG\n   `totalResources = 4`", "output": "8", "explanation": "You can concurrently execute tasks 0 and 2 (2+1 = 3 <= 4). Task 0 takes 5 units of time and task 2 takes 2 units of time.  After task 0 completes, task 1 can start. After task 2 completes, task 1 can also start.  Since task 1 and task 3 both depend on 0 and 2, they can begin after 5 time units. Task 1 takes 3 and task 3 takes 4 time units.  The minimum time to complete all tasks is max(5, 2+3) = max(5,5) = 5 + 3 = 8"}, {"input": "`n = 3`\n   `resources = [1, 2, 3]`\n   `time = [2, 4, 1]`\n   `dependencies = [[0, 1], [0, 2]]`\n   `totalResources = 3`", "output": "6", "explanation": "Task 0 can be completed in 2 time units. Then, either task 1 or task 2 can be executed. Task 1 takes 4 units of time and task 2 takes 1 unit of time.  The total time would be 2 + 4 = 6 if task 1 is selected and 2 + 1 = 3 if task 2 is selected. However, task 1 requires 2 units and task 2 requires 3 units, so only task 0 and task 2 can run concurrently, resulting in a minimum completion time of 6\n\n\nConstraints:\n- 1 <= n <= 15  (Limits the state space for dynamic programming)\n- 1 <= resources[i], time[i] <= 10 for all i\n- 1 <= totalResources <= 20\n- The dependencies form a directed acyclic graph (DAG).\n- Time complexity should be less than O(2^n * n^2).  (This is a hard problem; optimal solutions might still have exponential aspects due to the DAG nature, but brute force is insufficient)\n- Space complexity should be polynomial."}], "constraints": ["- 1 <= n <= 15  (Limits the state space for dynamic programming)", "- 1 <= resources[i], time[i] <= 10 for all i", "- 1 <= totalResources <= 20", "- The dependencies form a directed acyclic graph (DAG).", "- Time complexity should be less than O(2^n * n^2).  (This is a hard problem; optimal solutions might still have exponential aspects due to the DAG nature, but brute force is insufficient)", "- Space complexity should be polynomial."], "function_signature": {"java": "public long minCompletionTime(int totalResources, int[] resources, int[] time, int[][] dependencies) { // Your code here }", "cpp": "long long minCompletionTime(int totalResources, const std::vector<int>& resources, const std::vector<int>& time, const std::vector<std::vector<int>>& dependencies) { // Your code here }", "python": "def min_completion_time(total_resources, resources, time, dependencies): # Your code here\n    pass"}, "id": "2e9243b582d281ba6fd466546d09a4bb"}